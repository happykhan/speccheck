name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]'
          pip install ruff
      
      - name: Lint with Ruff (fast)
        run: |
          ruff check speccheck/ tests/
        continue-on-error: true
      
      - name: Lint with Pylint (comprehensive)
        run: |
          pylint speccheck/ --max-line-length=100 --disable=C0103,C0114,C0115,C0116,R0913,R0914
        continue-on-error: true
      
      - name: Check code formatting with Black
        run: |
          black --check --line-length 100 speccheck/ tests/
        continue-on-error: true
      
      - name: Check import sorting with isort
        run: |
          isort --check-only --profile black speccheck/ tests/
        continue-on-error: true

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          # Save CI minutes - test fewer combinations on non-Linux
          - os: macos-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.11"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]'
      
      - name: Run tests with pytest
        run: |
          pytest --cov=speccheck --cov-report=xml --cov-report=term-missing -v
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check package with twine
        run: |
          twine check dist/*
      
      - name: List distribution contents
        run: |
          echo "=== Source Distribution Contents ==="
          tar -tzf dist/*.tar.gz | head -20
          echo ""
          echo "=== Wheel Contents ==="
          unzip -l dist/*.whl | head -20
      
      - name: Test package installation
        run: |
          pip install dist/*.whl
          speccheck --version
          speccheck --help
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/
      
      - name: Install from wheel
        run: |
          pip install dist/*.whl
      
      - name: Run integration tests
        run: |
          # Test collect command
          speccheck collect tests/practice_data/Sample_* --output-file test_results.csv || true
          
          # Test check command
          speccheck check --criteria-file criteria.csv
          
          # Verify basic functionality
          speccheck --version
          
          echo "âœ“ Integration tests passed"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
      
      - name: Check for security vulnerabilities
        run: |
          # Check dependencies for known vulnerabilities
          safety check --json || true
      
      - name: Run Bandit security linter
        run: |
          bandit -r speccheck/ -f json || true
        continue-on-error: true
