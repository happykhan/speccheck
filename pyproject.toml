[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "speccheck"
version = "1.0.0"
description = "A bioinformatics software focused on quality control based on species criteria"
readme = "README.md"
authors = [
    {name = "Nabil-Fareed Alikhan", email = "nabil@happykhan.com"}
]
maintainers = [
    {name = "Nabil-Fareed Alikhan", email = "nabil@happykhan.com"}
]
license = {text = "GPLv3"}
keywords = ["genomics", "qc", "bioinformatics", "quality-control", "genomic-analysis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bioinformatics",
]
requires-python = ">=3.10"
dependencies = [
    "rich>=13.0.0",
    "jinja2>=3.0.0",
    "pandas>=2.0.0",
    "requests>=2.28.0",
    "plotly>=5.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "pylint>=2.15.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/happykhan/speccheck"
Documentation = "https://github.com/happykhan/speccheck"
Repository = "https://github.com/happykhan/speccheck"
"Bug Tracker" = "https://github.com/happykhan/speccheck/issues"

[project.scripts]
speccheck = "speccheck:main"

[tool.setuptools]
packages = ["speccheck", "speccheck.modules", "speccheck.plot_modules"]

[tool.setuptools.package-data]
speccheck = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--strict-markers",
    "--cov=speccheck",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["speccheck"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0913",  # Too many arguments
    "R0914",  # Too many local variables
]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__.py
"tests/*" = ["F401", "F811"]  # Allow test-specific patterns

[tool.ruff.lint.isort]
known-first-party = ["speccheck"]
